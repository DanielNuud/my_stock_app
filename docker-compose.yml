services:

  company-db:
    image: postgres:16
    container_name: company-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: company_info_db
    ports:
      - "5432:5432"
    networks:
      - stocknet

  news-db:
    image: postgres:16
    container_name: news-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: news_db
    ports:
      - "5433:5432"
    networks:
      - stocknet

  historical-db:
    image: postgres:16
    container_name: historical-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: historical_db
    ports:
      - "5434:5432"
    networks:
      - stocknet

  notification-db:
    image: postgres:16
    container_name: notification-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notification_db
    ports:
      - "5435:5432"
    networks:
      - stocknet

#  frontend:
#    build: ./frontend
#    container_name: frontend
#    ports:
#      - "5173:80"
#    depends_on:
#      - api-gateway
#    networks:
#      - stocknet

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - company-info-service
      - news-service
      - currency-service
      - historical-analytics-service
      - stocks-service
    networks:
      - stocknet

  company-redis:
    image: redis:7-alpine
    container_name: company-redis
    ports:
      - "6380:6379"
    networks:
      - stocknet

  currency-redis:
    image: redis:7-alpine
    container_name: currency-redis
    ports:
      - "6381:6379"
    networks:
      - stocknet

  company-info-service:
      build: ./company-info-service
      container_name: company-info-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://company-db:5432/company_info_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        POLYGON_API_KEY: V4_aPjfLf3uRm1v8EO3SRFvJfOM4WtDp
        SPRING_REDIS_HOST: company-redis
        SPRING_REDIS_PORT: 6379
        SPRING_PROFILES_ACTIVE: mock
      depends_on:
        - company-db
        - company-redis
      ports:
        - "8081:8080"
      networks:
        - stocknet

  news-service:
      build: ./news-service
      container_name: news-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://news-db:5432/news_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        POLYGON_API_KEY: V4_aPjfLf3uRm1v8EO3SRFvJfOM4WtDp
        SPRING_PROFILES_ACTIVE: mock
      depends_on:
        - news-db
      ports:
        - "8082:8080"
      networks:
        - stocknet

  currency-service:
    build: ./currency-service
    container_name: currency-service
    ports:
      - "8083:8080"
    environment:
      SPRING_REDIS_HOST: currency-redis
      SPRING_PROFILES_ACTIVE: mock
    depends_on:
      - currency-redis
    networks:
      - stocknet

  historical-analytics-service:
      build: ./historical-analytics-service
      container_name: historical-service
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://historical-db:5432/historical_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        POLYGON_API_KEY: V4_aPjfLf3uRm1v8EO3SRFvJfOM4WtDp
        SPRING_PROFILES_ACTIVE: mock
      depends_on:
        - historical-db
      ports:
        - "8084:8080"
      networks:
        - stocknet

  stocks-service:
      build: ./stocks-service
      container_name: stocks-service
      ports:
        - "8085:8080"
      environment:
        POLYGON_API_KEY: V4_aPjfLf3uRm1v8EO3SRFvJfOM4WtDp
        SPRING_PROFILES_ACTIVE: ws-mock
        STOCKS_WS_MOCK: "true"
        MOCK_WS_PERIOD_MS: "10000"
      depends_on:
        - historical-analytics-service
      networks:
        - stocknet

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8086:8080"
    depends_on:
      - notification-db
    networks:
      - stocknet

  load-tests:
    image: gradle:8.14.1-jdk17
    profiles: [ "tests" ]
    working_dir: /work
    user: "${UID}:${GID}"
    volumes:
      - ./load-tests:/work
    depends_on:
      - api-gateway
    sysctls:
      net.ipv4.ip_local_port_range: "10000 65535"
      net.ipv4.tcp_tw_reuse: "1"
    ulimits:
      nofile:
        soft: 1048576
        hard: 1048576
    environment:
      BASE_URL: http://api-gateway:8080
      WS_BASE_URL: ws://api-gateway:8080
      START_CONC: "100"
      TARGET_CONC: "1500"
      RAMP_MIN: "5"
      HOLD_MIN: "15"
      RAMPDOWN_SEC: "0"
    command: >
      ./gradlew gatlingRun
      -Dgatling.simulationClass=example.MasterRouteSimulation
      -DWS_BASE_URL=ws://api-gateway:8080
      -DBASE_URL=http://api-gateway:8080
    networks:
      - stocknet

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    depends_on:
      - api-gateway
      - company-info-service
      - currency-service
      - historical-analytics-service
      - news-service
    networks:
      - stocknet

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3000
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - stocknet

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    privileged: true
    command:
      - --housekeeping_interval=10s
      - --store_container_labels=true
      - --docker_only=true
      - --event_storage_event_limit=default=0
      - --event_storage_age_limit=default=0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /mnt/wsl/docker-desktop-data/data/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    devices:
      - /dev/kmsg
    ports:
      - "8090:8080"
    networks:
      - stocknet

  wiremock:
    container_name: wiremock
    profiles: [ "tests" ]
    image: wiremock/wiremock:latest
    entrypoint: [ "/docker-entrypoint.sh",
                  "--global-response-templating",
                  "--verbose",
                  "--disable-gzip" ]
    volumes:
      - ./mocks/wiremock:/home/wiremock
    ports:
      - "8089:8080"
    networks:
      - stocknet

#  wiremock-recorder:
#    container_name: wiremock-recorder
#    profiles: [ "perf","record" ]
#    image: wiremock/wiremock:latest
#    entrypoint: ["/docker-entrypoint.sh", "--verbose"]
#    volumes:
#      - ./mocks/recording:/home/wiremock
#    networks:
#      stocknet:
#        aliases:
#          - wiremock
#
#  ws-mock:
#    container_name: ws-mock
#    profiles: [ "perf" ]
#    image: node:20-alpine
#    working_dir: /app
#    command: [ "node","ws-mock.js" ]
#    volumes:
#      - ./ws-mock:/app
#      - ./ws-data:/app/ws-data
#    ports: [ "9090:9090" ]
#    healthcheck:
#      test: [ "CMD", "wget", "-qO-", "http://localhost:9090" ]
#      interval: 10s
#      timeout: 3s
#      retries: 10
#    networks:
#      - stocknet

volumes:
  grafana-data:

networks:
  stocknet:
    driver: bridge